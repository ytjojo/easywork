package com.ring.ytjojo.download;

import com.ring.ytjojo.download.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table THREAD_ENTITY.
 */
public class ThreadEntity {

    private Long id;
    private Long start;
    private Long end;
    private Long load;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ThreadEntityDao myDao;

    private FileEntity fileEntity;
    private Long fileEntity__resolvedKey;


    public ThreadEntity() {
    }

    public ThreadEntity(Long id, Long start, Long end, Long load) {
        this.id = id;
        this.start = start;
        this.end = end;
        this.load = load;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getThreadEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getStart() {
        return start;
    }

    public void setStart(Long start) {
        this.start = start;
    }

    public Long getEnd() {
        return end;
    }

    public void setEnd(Long end) {
        this.end = end;
    }

    public Long getLoad() {
        return load;
    }

    public void setLoad(Long load) {
        this.load = load;
    }

    /** To-one relationship, resolved on first access. */
    public FileEntity getFileEntity() {
        Long __key = this.id;
        if (fileEntity__resolvedKey == null || !fileEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FileEntityDao targetDao = daoSession.getFileEntityDao();
            FileEntity fileEntityNew = targetDao.load(__key);
            synchronized (this) {
                fileEntity = fileEntityNew;
            	fileEntity__resolvedKey = __key;
            }
        }
        return fileEntity;
    }

    public void setFileEntity(FileEntity fileEntity) {
        synchronized (this) {
            this.fileEntity = fileEntity;
            id = fileEntity == null ? null : fileEntity.getId();
            fileEntity__resolvedKey = id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
