package com.ring.ytjojo.download;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ring.ytjojo.download.FileEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FILE_ENTITY.
*/
public class FileEntityDao extends AbstractDao<FileEntity, Long> {

    public static final String TABLENAME = "FILE_ENTITY";

    /**
     * Properties of entity FileEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Length = new Property(3, Long.class, "length", false, "LENGTH");
        public final static Property Threads = new Property(4, Integer.class, "threads", false, "THREADS");
        public final static Property Range = new Property(5, Boolean.class, "range", false, "RANGE");
        public final static Property IsSucess = new Property(6, Boolean.class, "isSucess", false, "IS_SUCESS");
    };

    private DaoSession daoSession;


    public FileEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FileEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FILE_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'URL' TEXT," + // 1: url
                "'PATH' TEXT," + // 2: path
                "'LENGTH' INTEGER," + // 3: length
                "'THREADS' INTEGER," + // 4: threads
                "'RANGE' INTEGER," + // 5: range
                "'IS_SUCESS' INTEGER);"); // 6: isSucess
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FILE_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        Long length = entity.getLength();
        if (length != null) {
            stmt.bindLong(4, length);
        }
 
        Integer threads = entity.getThreads();
        if (threads != null) {
            stmt.bindLong(5, threads);
        }
 
        Boolean range = entity.getRange();
        if (range != null) {
            stmt.bindLong(6, range ? 1l: 0l);
        }
 
        Boolean isSucess = entity.getIsSucess();
        if (isSucess != null) {
            stmt.bindLong(7, isSucess ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(FileEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FileEntity readEntity(Cursor cursor, int offset) {
        FileEntity entity = new FileEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // length
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // threads
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // range
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isSucess
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FileEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLength(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setThreads(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRange(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIsSucess(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FileEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FileEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
