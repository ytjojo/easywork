package com.ring.ytjojo.download;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ring.ytjojo.download.ThreadEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table THREAD_ENTITY.
*/
public class ThreadEntityDao extends AbstractDao<ThreadEntity, Long> {

    public static final String TABLENAME = "THREAD_ENTITY";

    /**
     * Properties of entity ThreadEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property Start = new Property(1, Long.class, "start", false, "START");
        public final static Property End = new Property(2, Long.class, "end", false, "END");
        public final static Property Load = new Property(3, Long.class, "load", false, "LOAD");
    };


    public ThreadEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ThreadEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'THREAD_ENTITY' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'START' INTEGER," + // 1: start
                "'END' INTEGER," + // 2: end
                "'LOAD' INTEGER);"); // 3: load
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'THREAD_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ThreadEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long start = entity.getStart();
        if (start != null) {
            stmt.bindLong(2, start);
        }
 
        Long end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(3, end);
        }
 
        Long load = entity.getLoad();
        if (load != null) {
            stmt.bindLong(4, load);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ThreadEntity readEntity(Cursor cursor, int offset) {
        ThreadEntity entity = new ThreadEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // start
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // end
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // load
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ThreadEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setStart(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEnd(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLoad(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ThreadEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ThreadEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
